using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using NBitcoin;
using Stratis.SmartContracts.Core;
using Stratis.SmartContracts.Core.Exceptions;
using Stratis.SmartContracts.Core.State;
using Stratis.SmartContracts.Core.State.AccountAbstractionLayer;
using Stratis.SmartContracts.Executor.Reflection.ContractLogging;
using Stratis.SmartContracts.Executor.Reflection.Exceptions;
using Stratis.SmartContracts.Executor.Reflection.Serialization;

namespace Stratis.SmartContracts.Executor.Reflection
{
    /// <summary>
    /// Represents the current state of the world during a contract execution.
    /// <para>
    /// The state contains several components:
    /// </para>
    /// - The state repository, which contains global account, code, and contract data.
    /// - Internal transfers, which are transfers generated internally by contracts.
    /// - Balance state, which represents the intermediate state of the balances based on the internal transfers list.
    /// - The log holder, which contains logs generated by contracts during execution.
    /// <para>
    /// When a message is applied to the state, the state is updated if the application was successful. Otherwise, the state
    /// is rolled back to a previous snapshot. This works equally for nested state transitions generated by internal creates,
    /// calls and transfers.
    /// </para>
    /// </summary>
    public class State : IState
    {
        /// <summary>
        /// A snapshot of the world state during a contract execution.
        /// </summary>
        private class StateSnapshot
        {
            public StateSnapshot(IContractLogHolder logHolder, List<TransferInfo> internalTransfers, ulong nonce, byte[] root)
            {
                this.Logs = logHolder.GetRawLogs().ToImmutableList();
                this.InternalTransfers = internalTransfers.ToImmutableList();
                this.Nonce = nonce;
                this.Root = root;
            }

            public byte[] Root { get; }

            public ImmutableList<RawLog> Logs { get; }

            public ImmutableList<TransferInfo> InternalTransfers { get; }

            public ulong Nonce { get; }
        }

        public State(InternalTransactionExecutorFactory internalTransactionExecutorFactory,
            ISmartContractVirtualMachine vm,
            IContractStateRepository repository,
            IBlock block,
            Network network,
            ulong txAmount,
            uint256 transactionHash,
            IAddressGenerator addressGenerator,
            Gas gasLimit)
        {
            this.Repository = repository;
            this.LogHolder = new ContractLogHolder(network);
            this.InternalTransfers = new List<TransferInfo>();
            this.BalanceState = new BalanceState(this.Repository, txAmount, this.InternalTransfers);
            this.Network = network;
            this.Nonce = 0;
            this.Block = block;
            this.TransactionHash = transactionHash;
            this.AddressGenerator = addressGenerator;
            this.InternalTransactionExecutorFactory = internalTransactionExecutorFactory;
            this.Vm = vm;
            this.GasRemaining = gasLimit;
        }

        public Gas GasRemaining { get; private set; }

        public IAddressGenerator AddressGenerator { get; }

        public uint256 TransactionHash { get; }

        public IBlock Block { get; }

        public ulong Nonce { get; private set; }

        public Network Network { get; }

        public IContractStateRepository Repository { get; }

        public IContractLogHolder LogHolder { get; }

        public BalanceState BalanceState { get; }

        public List<TransferInfo> InternalTransfers { get; }

        public InternalTransactionExecutorFactory InternalTransactionExecutorFactory { get; }

        public ISmartContractVirtualMachine Vm { get; }

        private ulong GetNonceAndIncrement()
        {
            return this.Nonce++;
        }

        /// <summary>
        /// Returns a new contract address and increments the address generation nonce.
        /// </summary>
        private uint160 GetNewAddress()
        {
            return this.AddressGenerator.GenerateAddress(this.TransactionHash, this.GetNonceAndIncrement());
        }

        /// <summary>
        /// Reverts the state to a previous snapshot.
        /// </summary>
        private void Rollback(StateSnapshot snapshot)
        {
            ((ContractStateRepositoryRoot) this.Repository).SyncToRoot(snapshot.Root);

            // Reset the nonce
            this.Nonce = snapshot.Nonce;

            // Rollback internal transfers
            this.InternalTransfers.Clear();
            this.InternalTransfers.AddRange(snapshot.InternalTransfers);
            
            // Rollback logs
            this.LogHolder.Clear();
            this.LogHolder.AddRawLogs(snapshot.Logs);
        }

        /// <summary>
        /// Snapshots the existing state.
        /// </summary>
        private StateSnapshot TakeSnapshot()
        {
            var root = ((ContractStateRepositoryRoot) this.Repository).Root;
            return new StateSnapshot(this.LogHolder, this.InternalTransfers, this.Nonce, root);
        }

        private StateTransitionResult ApplyCreate(MethodCall method, byte[] code, BaseMessage message, string type = null)
        {
            if (this.GasRemaining < message.GasLimit || this.GasRemaining < GasPriceList.BaseCost)
                throw new InsufficientGasException();

            var stateSnapshot = this.TakeSnapshot();

            var gasMeter = new GasMeter(message.GasLimit);

            gasMeter.Spend((Gas)GasPriceList.BaseCost);

            var address = this.GetNewAddress();

            this.Repository.CreateAccount(address);

            var contractState = this.ContractState(gasMeter, address, message, this.Repository);

            var result = this.Vm.Create(method, contractState, code, type);

            var revert = result.ExecutionException != null;

            if (revert)
            {
                this.Rollback(stateSnapshot);
            }
            else
            {
                this.Repository.SetCode(address, code);
                this.Repository.SetContractType(address, result.Type);

                this.Repository.Commit();
                this.GasRemaining -= gasMeter.GasConsumed;
            }

            return new StateTransitionResult(
                gasMeter.GasConsumed,
                address,
                !revert,
                result
            );            
        }

        /// <summary>
        /// Applies an externally generated contract creation message to the current state.
        /// </summary>
        public StateTransitionResult Apply(ExternalCreateMessage message)
        {
            return this.ApplyCreate(message.Method, message.Code, message);
        }

        /// <summary>
        /// Applies an internally generated contract creation message to the current state.
        /// </summary>
        public StateTransitionResult Apply(InternalCreateMessage message)
        {
            var enoughBalance = this.EnsureContractHasEnoughBalance(message.From, message.Amount);

            if (!enoughBalance)
                throw new InsufficientBalanceException();

            byte[] contractCode = this.Repository.GetCode(message.From);

            return this.ApplyCreate(message.Method, contractCode, message, message.Type);
        }

        private StateTransitionResult ApplyCall(CallMessage message)
        {
            byte[] contractCode = this.Repository.GetCode(message.To);

            if (contractCode == null || contractCode.Length == 0)
            {
                return new StateTransitionResult(
                    (Gas) 0,
                    message.To,
                    false,
                    VmExecutionResult.Error(new SmartContractDoesNotExistException("No code"))
                );
            }

            if (this.GasRemaining < message.GasLimit || this.GasRemaining < GasPriceList.BaseCost)
                throw new InsufficientGasException();

            var stateSnapshot = this.TakeSnapshot();

            var type = this.Repository.GetContractType(message.To);

            var gasMeter = new GasMeter(message.GasLimit);

            gasMeter.Spend((Gas)GasPriceList.BaseCost);

            var contractState = this.ContractState(gasMeter, message.To, message, this.Repository);

            var result = this.Vm.ExecuteMethod(message.Method, contractState, contractCode, type);

            var revert = result.ExecutionException != null;

            if (revert)
            {
                this.Rollback(stateSnapshot);
            }
            else
            {                
                this.Repository.Commit();
                this.GasRemaining -= gasMeter.GasConsumed;
            }

            return new StateTransitionResult(
                gasMeter.GasConsumed,
                message.To,
                !revert,
                result
            );            
        }

        /// <summary>
        /// Applies an internally generated contract method call message to the current state.
        /// </summary>
        public StateTransitionResult Apply(InternalCallMessage message)
        {
            var enoughBalance = this.EnsureContractHasEnoughBalance(message.From, message.Amount);

            if (!enoughBalance)
                throw new InsufficientBalanceException();

            var result = this.ApplyCall(message);

            // For successful internal calls we need to add the transfer to the internal transfer list.
            // For external calls we do not need to do this.
            if (result.Success)
            {
                this.InternalTransfers.Add(new TransferInfo
                {
                    From = message.From,
                    To = message.To,
                    Value = message.Amount
                });
            }

            return result;
        }

        /// <summary>
        /// Applies an externally generated contract method call message to the current state.
        /// </summary>
        public StateTransitionResult Apply(ExternalCallMessage message)
        {
            return this.ApplyCall(message);
        }

        /// <summary>
        /// Applies an internally generated contract funds transfer message to the current state.
        /// </summary>
        public StateTransitionResult Apply(ContractTransferMessage message)
        {
            var enoughBalance = this.EnsureContractHasEnoughBalance(message.From, message.Amount);

            if (!enoughBalance)
                throw new InsufficientBalanceException();

            // If it's not a contract, create a regular P2PKH tx
            // If it is a contract, do a regular contract call
            byte[] contractCode = this.Repository.GetCode(message.To);

            if (contractCode == null || contractCode.Length == 0)
            {
                // No contract at this address, create a regular P2PKH xfer
                this.InternalTransfers.Add(new TransferInfo
                {
                    From = message.From,
                    To = message.To,
                    Value = message.Amount
                });

                return new StateTransitionResult(
                    (Gas) 0,
                    message.To,
                    true
                );
            }

            return this.ApplyCall(message);
        }

        /// <summary>
        /// Sets up a new <see cref="ISmartContractState"/> based on the current state.
        /// </summary>        
        private ISmartContractState ContractState(IGasMeter gasMeter, uint160 address, BaseMessage message, IContractStateRepository repository)
        {
            IPersistenceStrategy persistenceStrategy = new MeteredPersistenceStrategy(repository, gasMeter, new BasicKeyEncodingStrategy());

            var persistentState = new PersistentState(persistenceStrategy, new ContractPrimitiveSerializer(this.Network), address);

            var contractState = new SmartContractState(
                this.Block,
                new Message(
                    address.ToAddress(this.Network),
                    message.From.ToAddress(this.Network),
                    message.Amount
                ),
                persistentState,
                gasMeter,
                this.LogHolder,
                this.InternalTransactionExecutorFactory.Create(this),
                new InternalHashHelper(),
                () => this.BalanceState.GetBalance(address));

            return contractState;
        }

        /// <summary>
        /// Checks whether a contract has enough funds to make this transaction.
        /// </summary>
        private bool EnsureContractHasEnoughBalance(uint160 contractAddress, ulong amountToTransfer)
        {
            ulong balance = this.BalanceState.GetBalance(contractAddress);

            return balance >= amountToTransfer;
        }
    }
}